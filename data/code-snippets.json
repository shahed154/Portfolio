{
  "gameSnippets": [
    {
      "id": "multiplayer-interaction",
      "title": "Multiplayer Interaction System (C++)",
      "description": "This interaction system allows players to interact with various objects in the game world. It uses raycasting to detect interactable objects and supports multiplayer replication.",
      "language": "cpp",
      "code": "UInteractionComponent::UInteractionComponent()\r\n{\r\n\tSetComponentTickEnabled(false);\r\n\r\n\tInteractionTime = 0.f;\r\n\tInteractionDistance = 285.f;\r\n\tInteractableNameText = FText::FromString(\"Interactable Object\");\r\n\tInteractableActionText = FText::FromString(\"Interact\");\r\n\tbAllowMultipleInteractors = true;\r\n\r\n\tSpace = EWidgetSpace::Screen;\r\n\tDrawSize = FIntPoint(600, 100);\r\n\tbDrawAtDesiredSize = true;\r\n\r\n\tSetActive(true);\r\n\tSetHiddenInGame(true);\r\n\r\n}\r\n\r\nvoid UInteractionComponent::SetInteractableNameText(const FText& NewNameText)\r\n{\r\n\tInteractableNameText = NewNameText;\r\n\tRefreshWidget();\r\n}\r\n\r\nvoid UInteractionComponent::SetInteractableActionText(const FText& NewActionText)\r\n{\r\n\tInteractableActionText = NewActionText;\r\n\tRefreshWidget();\r\n}\r\n\r\nvoid UInteractionComponent::Deactivate()\r\n{\r\n\tSuper::Deactivate();\r\n\r\n\tfor (int32 i = Interactors.Num() - 1; i >= 0; --i)\r\n\t{\r\n\t\tif (AALSCharacter* Interactor = Interactors[i])\r\n\t\t{\r\n\t\t\tEndFocus(Interactor);\r\n\t\t\tEndInteract(Interactor);\r\n\t\t}\r\n\t}\r\n\r\n\tInteractors.Empty();\r\n}\r\n\r\nbool UInteractionComponent::CanInteract(class AALSCharacter* Character) const\r\n{\r\n\tconst bool bPlayerAlreadyInteracting = !bAllowMultipleInteractors && Interactors.Num() >= 1;\r\n\treturn !bPlayerAlreadyInteracting && IsActive() && GetOwner() != nullptr && Character != nullptr;\r\n}\r\n\r\nvoid UInteractionComponent::RefreshWidget()\r\n{\r\n\tif (UInteractionWidget* InteractionWidget = Cast<UInteractionWidget>(GetUserWidgetObject()))\r\n\t{\r\n\t\tInteractionWidget->UpdateInteractionWidget(this);\r\n\t}\r\n}\r\nvoid UInteractionComponent::BeginFocus(class AALSCharacter* Character)\r\n{\r\n\tif (!IsActive() || !GetOwner() || !Character)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\r\n\tOnBeginFocus.Broadcast(Character);\r\n\r\n\tif (Character->IsLocallyControlled())\r\n\t{\r\n\t\tSetHiddenInGame(false);\r\n\r\n\t\tfor (auto& VisualComp : GetOwner()->GetComponentsByClass(UPrimitiveComponent::StaticClass()))\r\n\t\t{\r\n\t\t\tif (UPrimitiveComponent* Prim = Cast<UPrimitiveComponent>(VisualComp))\r\n\t\t\t{\r\n\t\t\t\tPrim->SetRenderCustomDepth(true);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tRefreshWidget();\r\n}",
      "externalLink": {
        "text": "View full code on GitHub Gist",
        "url": "https://gist.github.com/shahed154/2d4fe4a6e9c11a91cac34157777d8a5d",
        "icon": "fab fa-github"
      }
    },
    {
      "id": "flashlight-system",
      "title": "Flashlight System (C++)",
      "description": "A simple but functional flashlight system that works in multiplayer, allowing other players to see others lights as well as having checks to utilize within blueprints" ,
      "language": "cpp",
      "code": "#pragma once\r\n\r\n#include \"CoreMinimal.h\"\r\n#include \"GameFramework\/Actor.h\"\r\n#include \"Flashlight.generated.h\"\r\n\r\nUCLASS()\r\nclass COPSNZOMBIES_API AFlashlight : public AActor\r\n{\r\n\tGENERATED_BODY()\r\n\t\r\npublic:\t\r\n\t\/\/ \r\n\tAFlashlight();\r\n\r\nprotected:\r\n\t\/\/ Called when the game starts or when spawned\r\n\tvirtual void BeginPlay() override;\r\n\r\npublic:\r\n\r\n\tUPROPERTY(EditAnywhere,Category = \"Flashlight\")\r\n\tclass UStaticMeshComponent* FlashlightMesh;\r\n\t\r\n\tUPROPERTY(EditAnywhere,BlueprintReadWrite,Category = \"Flashlight\")\r\n\tclass USpotLightComponent* SpotLight;\r\n\r\n\r\n\r\n\tUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Flashlight\")\r\n\tclass UStaticMeshComponent* FakeFlashlight;\r\n\r\npublic:\r\n\t\r\n\tvoid GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const;\r\n\r\nUFUNCTION(BlueprintCallable)\r\n\tvoid ToggleFlashlight();\r\n\r\n\tUPROPERTY(ReplicatedUsing =  OnRep_LightToggled)\r\n\tbool bLightOn;\r\n\r\n\tUPROPERTY(ReplicatedUsing = OnRep_FakeLightToggled)\r\n\tbool bFakeLightOn;\r\n\r\n\tUFUNCTION()\r\n\tvoid OnRep_LightToggled();\r\n\r\n\tUFUNCTION()\r\n\tvoid OnRep_FakeLightToggled();\r\n\r\n\tUFUNCTION(Server,Reliable,WithValidation)\r\n\tvoid Server_ToggleFlashlight();\r\n\r\n\tUStaticMeshComponent* GetFlashlightMesh() const;\r\n\r\n\r\n\r\n\r\n};\r\n\r\n\/\/\/\/\/\/\/\/\/\/\/\/\/ CPP File: \r\n\r\n\r\n\r\n#include \"Flashlight.h\"\r\n#include \"Components\/SpotLightComponent.h\"\r\n#include \"Net\/UnrealNetwork.h\"\r\n\r\n\/\/ \r\nAFlashlight::AFlashlight()\r\n{\r\n \t\/\/ Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.\r\n\tPrimaryActorTick.bCanEverTick = false;\r\n\r\n\tFlashlightMesh = CreateDefaultSubobject<UStaticMeshComponent>(TEXT(\"FlashlightMesh\"));\r\n\tRootComponent = FlashlightMesh;\r\n\tSpotLight = CreateDefaultSubobject<USpotLightComponent>(TEXT(\"Spotlight\"));\r\n\tSpotLight->SetupAttachment(FlashlightMesh); \r\n\r\n\tFakeFlashlight = CreateDefaultSubobject<UStaticMeshComponent>(TEXT(\"FakeFlashlight\"));\r\n\tFakeFlashlight->SetupAttachment(FlashlightMesh);\r\n\tFakeFlashlight->bOwnerNoSee = true;\r\n\r\n\tbReplicates=true;\r\n\tbLightOn=true;\r\n\tbFakeLightOn = true;\r\n\r\n}\r\n\r\nvoid AFlashlight::BeginPlay()\r\n{\r\n\tSuper::BeginPlay();\r\n\t\r\n}\r\n\r\nvoid AFlashlight::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const\r\n{\r\n\tSuper::GetLifetimeReplicatedProps(OutLifetimeProps);\r\n\tDOREPLIFETIME(AFlashlight, bLightOn);\r\n\tDOREPLIFETIME(AFlashlight, bFakeLightOn);\r\n\r\n}\t\r\n\r\nvoid AFlashlight::ToggleFlashlight()\r\n{\r\n\tif(HasAuthority())\r\n\t{\r\n\t\t\r\n\t\tSpotLight->SetHiddenInGame(bLightOn,false);\r\n\t\tFakeFlashlight->SetHiddenInGame(bFakeLightOn, false);\r\n\t\tbLightOn = !bLightOn;\r\n\t\tbFakeLightOn = !bFakeLightOn;\r\n\t\t\t\r\n\t}\r\n\telse\r\n\t{\r\n\t\tSpotLight->SetHiddenInGame(bLightOn,false);\r\n\t\tFakeFlashlight->SetHiddenInGame(bFakeLightOn,false);\r\n\r\n\t\tServer_ToggleFlashlight();\r\n\t}\r\n}\r\n\r\nvoid AFlashlight::Server_ToggleFlashlight_Implementation()\r\n{\r\n\tToggleFlashlight();\r\n}\r\n\r\nbool AFlashlight::Server_ToggleFlashlight_Validate()\r\n{\r\n\treturn true;\r\n}\r\n\r\nvoid AFlashlight::OnRep_LightToggled()\r\n{\r\n\t\tSpotLight->SetHiddenInGame(!bLightOn);\t\r\n\t\r\n\r\n}\r\n\r\nvoid AFlashlight::OnRep_FakeLightToggled()\r\n{\r\n\tFakeFlashlight->SetHiddenInGame(!bFakeLightOn);\r\n}\r\n\r\nUStaticMeshComponent* AFlashlight::GetFlashlightMesh() const\r\n{\r\n\treturn FlashlightMesh;\r\n}\r\n\r\n",
      "externalLink": {
    
      }
    },
    {
      "id": "stamina",
      "title": "Health and Stamina System (C++)",
      "description": "Sprinting system integrated within ALS using stamina. As well as a replicated health system",
      "language": "cpp",
      "code": "protected:\r\n\r\n\t\tUPROPERTY(ReplicatedUsing = OnRep_Health, EditAnywhere, BlueprintReadWrite, Category = \"Health\")\r\n\t\t\tfloat Health;\r\n\t\tUPROPERTY(EditDefaultsOnly, BlueprintReadWrite, Category = \"Health\")\r\n\t\t\tfloat MaxHealth;\r\n\r\n\t\tUFUNCTION(BlueprintCallable)\r\n\t\t\tvoid AddHealth(float Value);\r\n\r\n\t\tUFUNCTION(BlueprintCallable)\r\n\t\t\tvoid LowerHealth(float Value);\r\n\r\n\t\tUFUNCTION(BlueprintCallable)\r\n\t\t\tfloat GetHealth();\r\n\r\n\t\tfloat ModifyHealth(const float Delta);\r\n\r\n\t\tUFUNCTION()\r\n\t\t\tvoid OnRep_Health(float OldHealth);\r\n\r\n\t\tUFUNCTION(BlueprintImplementableEvent)\r\n\t\t\tvoid OnHealthModified(const float HealthDelta);\r\n\r\n\t\tUFUNCTION(BlueprintCallable, Server, Reliable, WithValidation)\r\n\t\t\tvoid ServerLowerHealth(float Value);\r\n\t\t\tbool ServerLowerHealth_Validate(float Value);\r\n\t\t\tvoid ServerLowerHealth_Implementation(float Value);\r\n\r\n\t\tUFUNCTION(Server, Reliable, WithValidation)\r\n\t\t\tvoid ServerAddHealth(float Value);\r\n\t\t\tbool ServerAddHealth_Validate(float Value);\r\n\t\t\tvoid ServerAddHealth_Implementation(float Value);\r\n\r\n\t\t\t\/\/\/ Stamina\r\n\r\n\t\tUPROPERTY(Replicated, EditAnywhere, BlueprintReadWrite, Category = \"Stamina\")\r\n\t\t\tfloat Stamina;\r\n\t\tUPROPERTY(EditDefaultsOnly, BlueprintReadWrite, Category = \"Stamina\")\r\n\t\t\tfloat MaxStamina;\r\n\r\n\t\tFTimerHandle TimerHandle;\r\n\t\tFTimerHandle StaminaRegeneration;\r\n\r\n\t\tvoid RegenerateStamina();\r\n\r\n\t\tUFUNCTION(Server, Reliable, WithValidation)\r\n\t\t\tvoid ServerLowerStamina(float Value);\r\n\t\t\tbool ServerLowerStamina_Validate(float Value);\r\n\t\t\tvoid ServerLowerStamina_Implementation(float Value);\r\n\r\n\t\tvoid LowerStamina(float Value);\r\n\r\n\t\tUFUNCTION(BlueprintCallable)\r\n\t\t\tfloat GetStamina();\r\n\r\n\t\tvoid ControlSprintingTimer(bool IsSprinting);\r\n\r\n\t\tUFUNCTION(Server, Reliable, WithValidation)\r\n\t\t\tvoid ServerControlSprintingTimer(bool IsSprinting);\r\n\t\t\tbool ServerControlSprintingTimer_Validate(bool IsSprinting);\r\n\t\t\tvoid ServerControlSprintingTimer_Implementation(bool IsSprinting);\r\n",
      "externalLink": {
        "text": "View full code on Github Gist",
        "url": "https://gist.github.com/shahed154/7ff9c0266f21809cb48b6ee0c057af14",
        "icon": "fab fa-github"
      }
    }
  ],
  "webSnippets": [
    {
      "id": "api-integration",
      "title": "API Integration (JavaScript)",
      "description": "This code fetches data from an API. It showcases asynchronous JavaScript, API integration, and error handling.",
      "language": "javascript",
      "code": "\/\/import axios from 'axios';\r\n\r\nconst BASE_URL = 'https:\/\/pokeapi.co\/api\/v2';\r\n\r\nconst getRandomPokemonId = () => Math.floor(Math.random() * 898) + 1;\r\n\r\nasync function getRandomPokemon() {\r\n    try {\r\n        const id = getRandomPokemonId();\r\n\r\n        \/\/  const response = await fetch(`${BASE_URL}\/pokemon\/${id}`);\r\n        const response = await axios.get(`${BASE_URL}\/pokemon\/${id}`);\r\n\r\n        \/\/ const pokemonData = await response.json();\r\n        return response.data;\r\n\r\n    } catch (error) {\r\n        console.error('Error getting random pokemon:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nasync function getRandomMove(pokemon, maxAttempts) {\r\n    try {\r\n        maxAttempts = 10;\r\n        const allMoves = pokemon.moves;\r\n\r\n\r\n        const shuffledMoves = [...allMoves].sort(() => 0.5 - Math.random())\r\n\r\n\r\n        const attempts = shuffledMoves.length;\r\n\r\n\r\n        for (let i = 0; i < attempts; i++) {\r\n\r\n            const moveEntry = shuffledMoves[i]\r\n\r\n            const moveUrl = moveEntry.move.url;\r\n\r\n            const response = await axios.get(moveUrl);\r\n\r\n            const moveData = response.data;\r\n\r\n\r\n            if (moveData.power !== null && moveData.power > 0) {\r\n                return moveData;\r\n            }\r\n        }\r\n\r\n\r\n        throw new Error(`No move with power ${attempts} attempts`);\r\n\r\n    } catch (error) {\r\n        console.error('Error getting random move with power', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport { getRandomPokemon, getRandomMove };",
      "externalLink": {
        "text": "View full code on GitHub",
        "url": "https://github.com/shahed154/SBA308A",
        "icon": "fab fa-github"
      }
    },
    {
      "id": "poke-html",
      "title": "Pokemon  Website (HTML) ",
      "description": "Index html code of the base website showcasing classes, IDs and website structure",
      "language": "HTML",
      "code": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Pokemon Battler<\/title>\r\n    <link rel=\"stylesheet\" href=\"css\/style.css\">\r\n    <link rel=\"preconnect\" href=\"https:\/\/fonts.googleapis.com\">\r\n<link rel=\"preconnect\" href=\"https:\/\/fonts.gstatic.com\" crossorigin>\r\n<link href=\"https:\/\/fonts.googleapis.com\/css2?family=Londrina+Solid:wght@100;300;400;900&family=Pixelify+Sans:wght@400..700&display=swap\" rel=\"stylesheet\">\r\n<style>\r\n    @import url('https:\/\/fonts.googleapis.com\/css2?family=Londrina+Solid:wght@100;300;400;900&family=Pixelify+Sans:wght@400..700&display=swap');\r\n    <\/style>\r\n\r\n<\/head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Random Pokemon Battle Simulator<\/h1>\r\n        \r\n        <div class=\"game-area\">\r\n            <!--player section -->\r\n            <div class=\"player-section\">\r\n                <h2>Your Pokemon<\/h2>\r\n                <div class=\"pokemon-card\" id=\"player-pokemon\">\r\n                    <p>Roll a random Pokemon!<\/p>\r\n                    <!--  add a pokemon sprite here mauybe -->\r\n                <\/div>\r\n                <div class=\"move-card\" id=\"player-move\">\r\n                    <p>Roll a random move!<\/p>\r\n                <\/div>\r\n                <div class=\"buttons\">\r\n                    <button id=\"roll-pokemon\">Roll Pokemon (3 left)<\/button>\r\n                    <button id=\"roll-move\" disabled>Roll Move (3 left)<\/button>\r\n                <\/div>\r\n            <\/div>\r\n            \r\n            <!-- Battle  Section -->\r\n            <div class=\"battle-section\">\r\n                <button id=\"start-battle\" disabled>Start Battle!<\/button>\r\n                <div class=\"battle-log\" id=\"battle-log\">\r\n                    <h3>Battle log ...<\/h3>\r\n                    <!--  add messages here for the battles info -->\r\n                <\/div>\r\n            <\/div>\r\n            \r\n            <!-- Opponent seection -->\r\n            <div class=\"opponent-section\">\r\n                <h2>Opponent<\/h2>\r\n                <div class=\"pokemon-card\" id=\"opponent-pokemon\">\r\n                    <p>Opponent's pokemon is... <\/p>\r\n                    <!-- pokemon sprite here -->\r\n\r\n                <\/div>\r\n                <div class=\"move-card\" id=\"opponent-move\">\r\n                    <p>Their move is...<\/p>\r\n                <\/div>\r\n            <\/div>\r\n        <\/div>\r\n        \r\n        <button id=\"reset-game\">Reset Game<\/button>\r\n    <\/div>\r\n    <script src=\"https:\/\/cdn.jsdelivr.net\/npm\/axios\/dist\/axios.min.js\"><\/script>\r\n    <script type=\"module\" src=\"js\/main.js\"><\/script>\r\n    <script type=\"module\" src=\"js\/api.js\"><\/script>\r\n   \r\n<\/body>\r\n<\/html>",
      "externalLink": {
        "text": "View full code on GitHub",
        "url": "https://github.com/shahed154/SBA308A",
        "icon": "fab fa-github"
      }
    },
   
    {
      "id": "dom-manipulation",
      "title": "DOM Manipulation (Javascript) ",
      "description": "This is from a simple assignment where we practiced using DOM / BOM manipulation",
      "language": "Javascript",
      "code": "const carsContainer = document.getElementById('cars-container');\r\nconst searchInput = document.getElementById('search-bar');\r\nconst categorySelect = document.querySelector('#category-select');\r\nconst addCarForm = document.getElementById('add-car-form');\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    displayCars(carsForSale);\r\n\r\n    const searchButton = document.querySelector('.search-section button');\r\n    searchButton.addEventListener('click', filterCars);\r\n    const form = document.getElementById('add-car-form');\r\n    form.addEventListener('submit', addCarForSale);\r\n\r\n    const errorMessages = document.querySelectorAll('.error-message');\r\n    errorMessages.forEach(errormessage => errormessage.style.display = 'none');\r\n});\r\n\r\nfunction displayCars(carsArray) {\r\n\r\n    carsContainer.innerHTML = ''\r\n\r\n    if (carsArray.length === 0) {\r\n        const noResultsMessage = document.createElement('p');\r\n        noResultsMessage.textContent = 'NO CARS FOUND!';\r\n        noResultsMessage.style.margin = '20px';\r\n        carsContainer.appendChild(noResultsMessage);\r\n        return;\r\n    }\r\n\r\n\r\n    const template = document.getElementById('car-card-template');\r\n\r\n\r\n    carsArray.forEach(car => {\r\n        const carCard = template.content.cloneNode(true)\r\n\r\n        const carImage = carCard.querySelector('.car-image');\r\n        carImage.style.backgroundImage = `url(${car.imageUrl})`;\r\n\r\n        const carName = carCard.querySelector('.car-name-display');\r\n        carName.textContent = car.name;\r\n\r\n\r\n        const carType = carCard.querySelector('.car-type-display');\r\n        carType.textContent = `Type: ${car.category}`;\r\n\r\n\r\n        const carPrice = carCard.querySelector('.car-price-display');\r\n        carPrice.textContent = `Price: $${car.price}`\r\n\r\n        const carDescription = carCard.querySelector('.car-description-display');\r\n        carDescription.textContent = car.description;\r\n\r\n        const contactButton = carCard.querySelector('button');\r\n        contactButton.addEventListener('click', () => {\r\n            alert(`Contact us about the ${car.name}!`);\r\n        });\r\n        carsContainer.appendChild(carCard);\r\n    });\r\n}\r\n\r\nfunction filterCars() {\r\n\r\n    const searchInput = document.getElementById('search-bar');\r\n\r\n    const searchTerm = searchInput.value.toLowerCase();\r\n\r\n    const selectedCategory = categorySelect.value;\r\n\r\n    if (!\/^[a-zA-Z\\s0-9]*$\/.test(searchInput.value)) {\r\n\r\n        window.alert(\"Error:  use only letters to search \");\r\n        return;\r\n    }\r\n\r\n    if ((searchInput.value).length < 2) {\r\n\r\n        window.alert(\"Error:  put more than 2 characters to search \");\r\n        return;\r\n    }\r\n\r\n    const filteredCars = carsForSale.filter(car => {\r\n\r\n        const matchesSearch = car.name.toLowerCase().includes(searchTerm);\r\n\r\n        const matchesDesc = car.description.toLowerCase().includes(searchTerm)\r\n\r\n        const matchesCategory = selectedCategory === 'all' || car.category === selectedCategory;\r\n\r\n        if ((matchesSearch || matchesDesc) && matchesCategory) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    });\r\n\r\n    displayCars(filteredCars);\r\n}\r\n\r\nfunction addCarForSale(event) {\r\n\r\n    event.preventDefault()\r\n\r\n    const carName = document.getElementById('car-name').value\r\n    const carCategory = document.getElementById('car-category').value\r\n    const carPrice = document.getElementById('car-price').value\r\n    const carImageUrl = document.getElementById('car-image-url').value\r\n    const carDescription = document.getElementById('car-description').value\r\n\r\n    let isValid = true;\r\n\r\n    document.querySelectorAll('.error-message').forEach(errormsg => errormsg.style.display = 'none');\r\n\r\n    if (carName.length < 3) {\r\n\r\n        const nameInput = document.getElementById('car-name');\r\n        const parentDiv = nameInput.parentNode;\r\n\r\n        const errorMessage = parentDiv.lastElementChild\r\n        errorMessage.style.display = 'block';\r\n        isValid = false;\r\n\r\n    }\r\n\r\n    if (carPrice <= 0) {\r\n        document.getElementById('price-error').style.display = 'block';\r\n        isValid = false;\r\n    }\r\n\r\n    if ((carImageUrl) && !isValidUrl(carImageUrl)) {\r\n        document.getElementById('image-error').style.display = 'block';\r\n        isValid = false;\r\n    }\r\n\r\n    if (carDescription.length < 10) {\r\n        document.getElementById('description-error').style.display = 'block';\r\n        isValid = false;\r\n    }\r\n\r\n\r\n    if (isValid) {\r\n\r\n        const maxId = carsForSale.reduce((max, car) => (car.id > max ? car.id : max), 0);\r\n\r\n        const newCar = {\r\n            id: maxId + 1,\r\n            name: carName,\r\n            category: carCategory,\r\n            price: carPrice,\r\n            imageUrl: carImageUrl || \"https:\/\/via.placeholder.com\/300x200?text=No+Image\",\r\n            description: carDescription\r\n        };\r\n\r\n        carsForSale.push(newCar);\r\n        displayCars(carsForSale);\r\n\r\n        document.getElementById('add-car-form').reset();\r\n        alert(`Your ${carName} has been added to the store! Good luck!`);\r\n    }\r\n}\r\n\r\nfunction isValidUrl(url) {\r\n    try {\r\n        new URL(url);\r\n        return true;\r\n    } catch (error) {\r\n        return false;\r\n    }\r\n}"
    }

  ]
}